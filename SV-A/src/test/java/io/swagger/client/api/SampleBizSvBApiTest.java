/*
 * Host-like WEB APIs with Swagger. This is a practice to make host-like WEB APIs with Swagger
 * generated code.
 *
 * OpenAPI spec version: 1.0.0 Contact: akahane.yasuhiko@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git Do not edit the class manually.
 */

package io.swagger.client.api;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.validation.Validation;
import org.apache.commons.lang3.StringUtils;
import org.junit.Ignore;
import org.junit.jupiter.api.Test;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.beanvalidation.SpringValidatorAdapter;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.JsonSyntaxException;
import io.swagger.client.sv_b.ApiException;
import io.swagger.client.sv_b.api.SampleBizSvBApi;
import io.swagger.client.sv_b.model.Sbz003bReq;

/**
 * API tests for SampleBizSvBApi
 */
// @Ignore
public class SampleBizSvBApiTest {

  private final SampleBizSvBApi api = new SampleBizSvBApi();

  private static final javax.validation.Validator javaxValidator =
      Validation.buildDefaultValidatorFactory().getValidator();
  private static final SpringValidatorAdapter validator =
      new SpringValidatorAdapter(javaxValidator);

  /**
   * The API return different items by status code.
   *
   *
   *
   * @throws ApiException if the Api call fails
   * @throws FileNotFoundException
   */
  @Test
  public void sbz002Test() throws Exception {

    // Sbz002bResOneOf response = api.sbz002(body);

    // TODO: test validations
  }

  /**
   * The API return different items by status code.
   *
   *
   *
   * @throws ApiException if the Api call fails
   */
  @Ignore
  @Test
  public void sbz003Test() throws Exception {
    Sbz003bReq body = null;
    // InlineResponse2001 response = api.sbz003(body);
    // Sbz003bResOneOf response = api.sbz003(body);

    // TODO: test validations
  }

  /* 1月1週の ここから */
  public void testMin(Object obj, String name, int min) throws Exception {
    getSetter(obj, name);
  }

  public void testMax(Object obj, String name, int max) throws Exception {
    Method setter = getSetter(obj, name);
    testMaxBoundary(obj, setter, max);
    testMaxOverBoundary(obj, setter, max);
  }


  private void testMaxBoundary(Object obj, Method setter, int max) throws Exception {
    String setStr = String.format("%1$" + max + "s", "");;
    setter.invoke(obj, setStr);
    Errors errors = new BeanPropertyBindingResult(obj, obj.getClass().getName());
    validator.validate(obj, errors);
    System.out.println(errors);
  }

  private void testMaxOverBoundary(Object obj, Method setter, int max) throws Exception {
    String setStr = String.format("%1$" + (max + 1) + "s", "");;
    setter.invoke(obj, setStr);
    Errors errors = new BeanPropertyBindingResult(obj, obj.getClass().getName());
    validator.validate(obj, errors);
    System.out.println(errors);
  }


  private Method getSetter(Object obj, String name) throws Exception {
    String setterName = "set" + StringUtils.capitalize(name);
    Method setter = obj.getClass().getDeclaredMethod(setterName, String.class);
    setter.setAccessible(true);
    return setter;


  }
  /* 1月1週の ここまで */

  /*
   * * * * * *
   *
   */

  private static final String ID = "sbz002b";

  @Test
  public void testStatusCode() {
    System.out.println("testStatusCode");
    testMin("statusCode", 4);

  }

  @Test
  public void testMenu_Id() {
    System.out.println("testMenu_Id");
    testMin("menu.id", 5);

  }

  public void testMin(String path, int min) {
    JsonObject rootObj = getJsonObj();
    JsonObject targetObj = rootObj;
    System.out.println(rootObj);


    int lastIdx = path.lastIndexOf(".");
    String pmtPth = path.substring(lastIdx + 1);

    if(0 < lastIdx) {
      String objPth = path.substring(0, lastIdx);
      targetObj = getJsonObjByPath(rootObj, objPth);
    }

    // 境界値最小
    targetObj.addProperty(pmtPth, getDummyStr(min));
    System.out.println(rootObj);




    // 境界値最小-1
    targetObj.addProperty(pmtPth, getDummyStr(min - 1));
    System.out.println(rootObj);

  }


//  @Test
  public void test() throws IOException {

    JsonObject obj = getJsonObj();
    System.out.println(obj);


    int max = 5;
    int min = 5;

    String path = "menu.id";
    int lstIdx = path.lastIndexOf(".");
    String objPth = path.substring(0, lstIdx);
    String pmtPth = path.substring(lstIdx + 1);


    JsonObject parentObj = getJsonObjByPath(obj, objPth);
    // parentObj.addProperty(pmtPth, "hogea");

    // 空文字
    parentObj.addProperty(pmtPth, "");
    System.out.println(obj);
    // null
    parentObj.remove(pmtPth);
    System.out.println(obj);
    // 境界値最大
    parentObj.addProperty(pmtPth, getDummyStr(max));
    System.out.println(obj);
    // 境界値最大+1
    parentObj.addProperty(pmtPth, getDummyStr(max + 1));
    System.out.println(obj);
    // 境界値最小
    parentObj.addProperty(pmtPth, getDummyStr(min));
    System.out.println(obj);
    // 境界値最小-1
    parentObj.addProperty(pmtPth, getDummyStr(min - 1));
    System.out.println(obj);

  }


  // 以下は共通処理

  public static JsonObject getJsonObj() {
    return new GsonBuilder().create().fromJson(getJsonStr(), JsonObject.class);
  }

  public static JsonObject getJsonObjByPath(JsonObject obj, String path)
      throws JsonSyntaxException {
    String[] seg = path.split("\\.");

    for (String element : seg) {
      obj = obj.get(element).getAsJsonObject();
    }

    return obj;
  }

  private static String getJsonStr() {
    Path file = Paths.get("src/test/resources/" + ID + "_response.json");

    try {
      return Files.readString(file);
    } catch (IOException e) {
      e.printStackTrace();
      return null;
    }

  }

  public static String getDummyStr(int size) {
    StringBuilder sb = new StringBuilder();
    for (int i = 1; i <= size; i++) {
      sb.append(String.valueOf(i % 10));
    }
    return sb.toString();
  }

}
