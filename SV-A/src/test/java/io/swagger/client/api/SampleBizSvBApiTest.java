/*
 * Host-like WEB APIs with Swagger. This is a practice to make host-like WEB APIs with Swagger
 * generated code.
 *
 * OpenAPI spec version: 1.0.0 Contact: akahane.yasuhiko@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git Do not edit the class manually.
 */

package io.swagger.client.api;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.validation.Validation;
import org.apache.commons.lang3.StringUtils;
import org.junit.jupiter.api.Test;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.beanvalidation.SpringValidatorAdapter;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonSyntaxException;
import com.google.gson.stream.JsonReader;
import io.swagger.client.sv_b.ApiException;
import io.swagger.client.sv_b.api.SampleBizSvBApi;
import io.swagger.client.sv_b.model.Sbz002bReq;
import io.swagger.client.sv_b.model.Sbz003bReq;

/**
 * API tests for SampleBizSvBApi
 */
//@Ignore
public class SampleBizSvBApiTest {

  private final SampleBizSvBApi api = new SampleBizSvBApi();

  private static final javax.validation.Validator javaxValidator = Validation.buildDefaultValidatorFactory().getValidator();
  private static final SpringValidatorAdapter validator = new SpringValidatorAdapter(javaxValidator);

  /**
   * The API return different items by status code.
   *
   *
   *
   * @throws ApiException if the Api call fails
   * @throws FileNotFoundException
   */
  @Test
  public void sbz002Test() throws Exception {
    Gson gson = new Gson();
    JsonReader reader = new JsonReader(new FileReader("src/test/resources/Sbz002bReq.json"));
    Sbz002bReq body = gson.fromJson(reader, Sbz002bReq.class);

//    Sbz002bResOneOf response = api.sbz002(body);

    testMax(body, "reqItem1", 10);
    // TODO: test validations
  }

  /**
   * The API return different items by status code.
   *
   *
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void sbz003Test() throws Exception {
    Sbz003bReq body = null;
    // InlineResponse2001 response = api.sbz003(body);
//    Sbz003bResOneOf response = api.sbz003(body);

    // TODO: test validations
  }

  public void testMin(Object obj, String name, int min) throws Exception {
    getSetter(obj, name);
  }

  public void testMax(Object obj, String name, int max) throws Exception {
    Method setter = getSetter(obj, name);
    testMaxBoundary(obj, setter, max);
    testMaxOverBoundary(obj, setter, max);
  }


  private void testMaxBoundary(Object obj, Method setter, int max) throws Exception {
    String setStr = String.format("%1$" + max + "s", "");;
    setter.invoke(obj, setStr);
    Errors errors = new BeanPropertyBindingResult(obj, obj.getClass().getName());
    validator.validate(obj, errors);
    System.out.println(errors);
  }

  private void testMaxOverBoundary(Object obj, Method setter, int max) throws Exception {
    String setStr = String.format("%1$" + (max + 1) + "s", "");;
    setter.invoke(obj, setStr);
    Errors errors = new BeanPropertyBindingResult(obj, obj.getClass().getName());
    validator.validate(obj, errors);
    System.out.println(errors);
  }


  private Method getSetter(Object obj, String name) throws Exception {
    String setterName = "set" + StringUtils.capitalize(name);
    Method setter = obj.getClass().getDeclaredMethod(setterName, String.class);
    setter.setAccessible(true);
    return setter;


  }





























  public static JsonElement fromString(String json, String path)
          throws JsonSyntaxException {
      JsonObject obj = new GsonBuilder().create().fromJson(json,
              JsonObject.class);
      String[] seg = path.split("\\.");

      for (String element : seg) {

          if (obj != null) {
              JsonElement ele = obj.get(element);
              if (!ele.isJsonObject())
                  return ele;
              else
                  obj = ele.getAsJsonObject();
          } else {
              return null;
          }

      }

      return obj;
  }

  public static JsonObject fromObj(JsonObject obj, String path)
          throws JsonSyntaxException {
      String[] seg = path.split("\\.");

      for (String element : seg) {

          if (obj != null) {
              JsonElement ele = obj.get(element);
              if (!ele.isJsonObject())
                  return ele.getAsJsonObject();
              else
                  obj = ele.getAsJsonObject();
          } else {
              return null;
          }

      }

      return obj;
  }

  private static final String ID = "sbz002";
  @Test
  public void test() throws IOException {

      String text = getJsonStr();


      /*
       * TODO JSON上でObjectなやつはJsonObject、文字列なやつはJsonPrimitive。
       * primitiveは値を変えられないので、親を持ってきてaddPropertyで値（JsonPrimitive）を上書きする。
       *
       */
      JsonElement el = fromString(text, "parent.child");



      JsonObject obj = new GsonBuilder().create().fromJson(text,
              JsonObject.class);
      System.out.println(obj);

      JsonObject parentObj= fromObj(obj, "parent");
      parentObj.addProperty("child", "hoge");

      System.out.println(obj);

  }

  private String getJsonStr() {
      Path file = Paths.get("src/test/resources/" + ID + "_response.json");

      try {
          return Files.readString(file);
      } catch (IOException e) {
          e.printStackTrace();
          return null;
      }

  }

  public void testNullNg(String path) {

  }
}
